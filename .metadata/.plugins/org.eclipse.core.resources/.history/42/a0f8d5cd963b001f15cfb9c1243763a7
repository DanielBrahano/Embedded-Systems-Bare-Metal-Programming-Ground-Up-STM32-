/*
 * stm32f401xx_gpio_driver.c
 *
 *  Created on: Jul 6, 2024
 *      Author: Daniel
 */

#include "stm32f401xx_gpio_driver.h"
#include <stdio.h>

 /*
  * Peripheral Clock setup
  */

/****************************************
 * @fn			- GPIO_PeriClockControl
 *
 * @brief		- This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]	- Base address of gpio peripheral
 * @param[in]	- ENABLE or DISABLE macros
 *
 *
 * @return 		- None
 *
 * @Note 		- None
 */
#include "stm32f401xx_gpio_driver.h"
#include <stdio.h> // Include stdio.h for printf

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
    if (EnorDi == ENABLE) {
        if (pGPIOx == GPIOA) {
            GPIOA_PCLK_EN();
        } else if (pGPIOx == GPIOB) {
            GPIOB_PCLK_EN();
        } else if (pGPIOx == GPIOC) {
            GPIOC_PCLK_EN();
        } else if (pGPIOx == GPIOD) {
            GPIOD_PCLK_EN();
        } else if (pGPIOx == GPIOE) {
            GPIOE_PCLK_EN();
        } else if (pGPIOx == GPIOH) {
            GPIOH_PCLK_EN();
        } else {
            printf("ERROR - wrong pGPIOx parameter\n");
        }
    } else if (EnorDi == DISABLE) {
        if (pGPIOx == GPIOA) {
            GPIOA_PCLK_DI();
        } else if (pGPIOx == GPIOB) {
            GPIOB_PCLK_DI();
        } else if (pGPIOx == GPIOC) {
            GPIOC_PCLK_DI();
        } else if (pGPIOx == GPIOD) {
            GPIOD_PCLK_DI();
        } else if (pGPIOx == GPIOE) {
            GPIOE_PCLK_DI();
        } else if (pGPIOx == GPIOH) {
            GPIOH_PCLK_DI();
        } else {
            printf("ERROR - wrong pGPIOx parameter\n");
        }
    } else {
        printf("ERROR - wrong EnorDi parameter\n");
    }
}

 /*
  * Init and De-Init
  */
 void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
 {

 }

 void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
 {

 }

 /*
  * Data read and write
  */
 uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
 {

 }

 uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
 {

 }

 void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
 {

 }

 void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
 {

 }

 void GPIO_ToggleOutputPing(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
 {

 }


 /*
  * IRQ Configuration and ISR handling
  */
 void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t ENorDi)
 {

 }

 void GPIO_IRQHandling(uint8_t PinNumber)
 {

 }
