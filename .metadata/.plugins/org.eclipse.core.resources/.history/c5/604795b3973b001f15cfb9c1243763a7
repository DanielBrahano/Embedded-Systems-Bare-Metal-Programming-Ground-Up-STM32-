/*
 * stm32f401xx_gpio_driver.c
 *
 *  Created on: Jul 6, 2024
 *      Author: Daniel
 */

#include "stm32f401xx_gpio_driver.h"
#include <stdio.h> // Include stdio.h for printf

/*
 * Peripheral Clock setup
 */

/****************************************
 * @fn          - GPIO_PeriClockControl
 *
 * @brief       - This function enables or disables peripheral clock for given GPIO port
 *
 * @param[in]   - Base address of gpio peripheral
 * @param[in]   - ENABLE or DISABLE macros
 *
 * @return      - None
 *
 * @Note        - None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
//    if (EnorDi == ENABLE) {
//        if (pGPIOx == GPIOA) {
//            GPIOA_PCLK_EN();
//        } else if (pGPIOx == GPIOB) {
//            GPIOB_PCLK_EN();
//        } else if (pGPIOx == GPIOC) {
//            GPIOC_PCLK_EN();
//        } else if (pGPIOx == GPIOD) {
//            GPIOD_PCLK_EN();
//        } else if (pGPIOx == GPIOE) {
//            GPIOE_PCLK_EN();
//        } else if (pGPIOx == GPIOH) {
//            GPIOH_PCLK_EN();
//        } else {
//            printf("ERROR - wrong pGPIOx parameter\n");
//        }
//    } else if (EnorDi == DISABLE) {
//        if (pGPIOx == GPIOA) {
//            GPIOA_PCLK_DI();
//        } else if (pGPIOx == GPIOB) {
//            GPIOB_PCLK_DI();
//        } else if (pGPIOx == GPIOC) {
//            GPIOC_PCLK_DI();
//        } else if (pGPIOx == GPIOD) {
//            GPIOD_PCLK_DI();
//        } else if (pGPIOx == GPIOE) {
//            GPIOE_PCLK_DI();
//        } else if (pGPIOx == GPIOH) {
//            GPIOH_PCLK_DI();
//        } else {
//            printf("ERROR - wrong pGPIOx parameter\n");
//        }
//    } else {
//        printf("ERROR - wrong EnorDi parameter\n");
//    }
}

/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
    // TODO: Implement initialization logic based on pGPIOHandle's configuration
}

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx) {
    // TODO: Implement de-initialization logic for the given GPIO port
}

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    return (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
}

uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx) {
    return (uint16_t)pGPIOx->IDR;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value) {
    if (Value == GPIO_PIN_SET) {
        pGPIOx->ODR |= (1 << PinNumber);
    } else {
        pGPIOx->ODR &= ~(1 << PinNumber);
    }
}

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value) {
    pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
    pGPIOx->ODR ^= (1 << PinNumber);
}

/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t ENorDi) {
    // TODO: Implement IRQ configuration logic
}

void GPIO_IRQHandling(uint8_t PinNumber) {
    // TODO: Implement IRQ handling logic
}
