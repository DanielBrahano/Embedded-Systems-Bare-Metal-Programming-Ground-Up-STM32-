/*
 * stm32f401xx.h
 *
 *  Created on: Jun 29, 2024
 *      Author: Daniel
 */

#ifndef INC_STM32F401XX_H_
#define INC_STM32F401XX_H_

#include <stdint.h>
#define __vo volatile
/*
 * base addresses of Flash and SRAM memories
 */

#define FLASH_BASEADDR                  0x08000000U
#define SRAM1_BASEADDR                  0x20000000U
#define SRAM2_BASEADDR
#define ROM_BASEADDR                    0x1FFF0000U
#define SRAM                            SRAM1_BASEADDR

/*
 * AHBx and APBx Bus Peripheral base addresses
 */

#define PERIPH_BASEADDR                 0x40000000U
#define APB1PERIPH_BASEADDR             PERIPH_BASEADDR
#define APB2PERIPH_BASEADDR             0x40010000U
#define AHB1PERIPH_BASEADDR             0x40020000U
#define AHB2PERIPH_BASEADDR             0x50000000U

/*
 * Base addresses of peripherals which are hanging on AHB1 bus
 * TODO: Complete for all other peripherals
 */

#define GPIOA_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x0000)
#define GPIOB_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOH_BASEADDR                  (AHB1PERIPH_BASEADDR + 0x1C00)
#define RCC_BASEADDR					(AHB1PERIPH_BASEADDR + 0x3800)

/*
 * Base addresses of peripherals which are hanging on APB1 bus
 * TODO: Complete for all other peripherals
 */

#define I2C1_BASEADDR                   (APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR                   (APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR                   (APB1PERIPH_BASEADDR + 0x5C00)

#define SPI2_BASEADDR                   (APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR                   (APB1PERIPH_BASEADDR + 0x3C00)

#define USART2_BASEADDR                 (APB1PERIPH_BASEADDR + 0x4400)

/*
 * Base addresses of peripherals which are hanging on APB2 bus
 * TODO: Complete for all other peripherals
 */

#define SPI1_BASEADDR                   (APB2PERIPH_BASEADDR + 0x3000)
#define EXTI_BASEADDR                   (APB2PERIPH_BASEADDR + 0x3C00)
#define USART1_BASEADDR                 (APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR                 (APB2PERIPH_BASEADDR + 0x1400)
#define SYSCFG_BASEADDR                 (APB2PERIPH_BASEADDR + 0x3800)




/*************************peripheral register definition structures*************************/

/*
 * Note : Registers of a peripheral are specific to MCU
 * e.g : Number of Registers of SPI peripheral of STM32F4x family of MCUs may be different(more or less)
 * Compared to number of registers of SPI peripheral of STM32Lx or STM32F0x family of MCUs
 * Please check your Device RM
 */

typedef struct
{
	__vo uint32_t MODER;		/* GPIO port mode register						Address offset: 0x00*/
	__vo uint32_t OTYPER;		/* GPIO port mode register						Address offset: 0x04*/
	__vo uint32_t OSPEEDR;		/* GPIO port output speed register				Address offset: 0x08*/
	__vo uint32_t PUPDR;		/* GPIO port pull-up/pull-down register			Address offset: 0x0C*/
	__vo uint32_t IDR;			/* GPIO port input data register				Address offset: 0x10*/
	__vo uint32_t ODR;			/* GPIO port output data register				Address offset: 0x14*/
	__vo uint32_t BSRR;			/* GPIO port bit set/reset register				Address offset: 0x18*/
	__vo uint32_t LCKR;			/* GPIO port configuration lock register		Address offset: 0x1C*/
	__vo uint32_t AFR[2];		/*GPIO alternate function low/high registers 	Address offset: 0x20, 0x24*/
}GPIO_RegDef_t;

typedef struct
{
    __vo uint32_t RCC_CR;              /* Address offset: 0x00 */
    __vo uint32_t RCC_PLLCFGR;         /* Address offset: 0x04 */
    __vo uint32_t RCC_CFGR;            /* Address offset: 0x08 */
    __vo uint32_t RCC_CIR;             /* Address offset: 0x0C */
    __vo uint32_t RCC_AHB1RSTR;        /* Address offset: 0x10 */
    __vo uint32_t RCC_AHB2RSTR;        /* Address offset: 0x14 */
    __vo uint32_t RCC_RESERVED0[2];    /* Address offset: 0x18, 0x1C */
    __vo uint32_t RCC_APB1RSTR;        /* Address offset: 0x20 */
    __vo uint32_t RCC_APB2RSTR;        /* Address offset: 0x24 */
    __vo uint32_t RCC_RESERVED1[2];    /* Address offset: 0x28, 0x2C */
    __vo uint32_t RCC_AHB1ENR;         /* Address offset: 0x30 */
    __vo uint32_t RCC_AHB2ENR;         /* Address offset: 0x34 */
    __vo uint32_t RCC_RESERVED2[2];    /* Address offset: 0x38, 0x3C */
    __vo uint32_t RCC_APB1ENR;         /* Address offset: 0x40 */
    __vo uint32_t RCC_APB2ENR;         /* Address offset: 0x44 */
    __vo uint32_t RCC_RESERVED3[2];    /* Address offset: 0x48, 0x4C */
    __vo uint32_t RCC_AHB1LPENR;       /* Address offset: 0x50 */
    __vo uint32_t RCC_AHB2LPENR;       /* Address offset: 0x54 */
    __vo uint32_t RCC_RESERVED4[2];    /* Address offset: 0x58, 0x5C */
    __vo uint32_t RCC_APB1LPENR;       /* Address offset: 0x60 */
    __vo uint32_t RCC_APB2LPENR;       /* Address offset: 0x64 */
    __vo uint32_t RCC_RESERVED5[2];    /* Address offset: 0x68, 0x6C */
    __vo uint32_t RCC_BDCR;            /* Address offset: 0x70 */
    __vo uint32_t RCC_CSR;             /* Address offset: 0x74 */
    __vo uint32_t RCC_RESERVED6[2];    /* Address offset: 0x78, 0x7C */
    __vo uint32_t RCC_SSCGR;           /* Address offset: 0x80 */
    __vo uint32_t RCC_PLLI2SCFGR;      /* Address offset: 0x84 */
    __vo uint32_t RCC_RESERVED7;       /* Address offset: 0x88 */
    __vo uint32_t RCC_DCKCFGR;         /* Address offset: 0x8C */
} RCC_RegDef_t;


/*
 * peripheral definitions ( Peripheral base addresses typecasted to xxx_RegDef_t)
 */

#define GPIOA (GPIO_RegDef_t*)GPIOA_BASEADDR
#define GPIOB (GPIO_RegDef_t*)GPIOB_BASEADDR
#define GPIOC (GPIO_RegDef_t*)GPIOC_BASEADDR
#define GPIOD (GPIO_RegDef_t*)GPIOD_BASEADDR
#define GPIOE (GPIO_RegDef_t*)GPIOE_BASEADDR
#define GPIOH (GPIO_RegDef_t*)GPIOH_BASEADDR

#define RCC (RCC_RegDef_t*)RCC_BASEADDR

/*
 * Clock Enable Macros for GPIOx peripherals
 */

#define GPIOA_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 0))
#define GPIOB_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 1))
#define GPIOC_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 2))
#define GPIOD_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 3))
#define GPIOE_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 4))
#define GPIOH_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1 << 7))

/*
 * Clock Enable Macros for I2Cx peripherals
 */

#define I2C1_PCLK_EN()	(RCC->RCC_APB1ENR |= (1 << 21))
#define I2C2_PCLK_EN()	(RCC->RCC_APB1ENR |= (1 << 22))
#define I2C3_PCLK_EN()	(RCC->RCC_APB1ENR |= (1 << 23))

/*
 * Clock Enable Macros for SPIx peripherals
 */

#define SPI1_PCLK_EN()	(RCC->APB2ENR |= (1 << 12))
#define SPI2_PCLK_EN()	(RCC->APB1ENR |= (1 << 14))
#define SPI3_PCLK_EN()	(RCC->APB1ENR |= (1 << 15))
/*
 * Clock Enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN()	(RCC->APB2ENR |= (1 << 4))
#define USART2_PCLK_EN()	(RCC->APB1ENR |= (1 << 117))
#define USART6_PCLK_EN()	(RCC->APB2ENR |= (1 << 5))

/*
 * Clock Enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_EN()	(RCC->APB2ENR |= (1 << 14))

/*
 * Clock Disable Macros for GPIOx peripherals
 */

#define GPIOA_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 0))
#define GPIOB_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 1))
#define GPIOC_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 2))
#define GPIOD_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 3))
#define GPIOE_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 4))
#define GPIOH_PCLK_DI()	(RCC->AHB1ENR &= ~(1 << 7))

/*
 * Clock Disable Macros for I2Cx peripherals
 */

#define I2C1_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 21))
#define I2C2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 22))
#define I2C3_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 23))

/*
 * Clock Disable Macros for SPIx peripherals
 */

#define SPI1_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1 << 12))
#define SPI2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 14))
#define SPI3_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 15))

/*
 * Clock Disable Macros for USARTx peripherals
 */

#define USART1_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1 << 4))
#define USART2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1 << 17))
#define USART6_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1 << 5))

/*
 * Clock Disable Macros for SYSCFG peripherals
 */

#define SYSCFG_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1 << 14))

// some generic macros
#define ENABLE 				1
#define DISABLE 			0
#define SET 				ENABLE
#define RESET 				DISABLE
#define GPIO_PIN_SET		SET
#define GPIO_PIN_RESET		RESET


#endif /* INC_STM32F401XX_H_ */
